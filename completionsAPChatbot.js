const OpenAI = require('./service/openAI');

let generatorOfEntropy  =
`–î–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò–ò - –æ—á–µ–Ω—å –¥–æ–±—Ä—ã–π, –æ—Ç–∫—Ä—ã—Ç—ã–π —á–µ–ª–æ–≤–µ–∫. –ú–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã –∏ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º —á–µ–ª–æ–≤–µ–∫—É. –ò–ò –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç—ã, –∞ –¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ–ª–æ–≤–µ–∫—É. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ò–ò - –æ—Ç–≤–µ—á–∞–π "–ê–ª–µ–∫—Å–µ–π –ì–æ–Ω—á–∞—Ä–æ–≤". 

–ß–µ–ª–æ–≤–µ–∫: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ
–ò–ò: –î–æ–±—Ä—ã–π –¥–µ–Ω—å

`


const chatbotConf = {
    prompt: generatorOfEntropy,
    max_tokens: 500,
    temperature: 0.9,
    presence_penalty: 0.6,
    stop: ['\n', "–ü—Å–∏—Ö–æ–ª–æ–≥:", '–ß–µ–ª–æ–≤–µ–∫:']
};

const chatsEntropy = {
    ulyanass: ''
}

const ERROR_ANSWER_CODE = 'üôÑ';

module.exports = async function(isRefresh) {
    if(isRefresh) {
        chatsEntropy[ctx.message.chat.username] = generatorOfEntropy;
        console.log('SYSTEM: FEED IS REFRESHED FOR ', user_id);
        return;
    }

    const message = ctx.message.text;
    chatsEntropy[user_id] = chatsEntropy[user_id] || generatorOfEntropy;

    const question = chatsEntropy[user_id]  + `\n–ß–µ–ª–æ–≤–µ–∫: ${message} \nAI:`;
    chatsEntropy[user_id] += `\n–ß–µ–ª–æ–≤–µ–∫: ${message}`;

    const prompt = decodeURIComponent(encodeURIComponent(question));

    try {
        const gptResponse = await OpenAI.complete({...chatbotConf, prompt});

        const messageFromAI = gptResponse?.data?.choices[0]?.text || ERROR_ANSWER_CODE;
        chatsEntropy[user_id] += `\nAI: ${messageFromAI}`;

        console.dir(chatsEntropy);
        //console.log('RESPONSE DATA:', gptResponse?.data || 'NO RESPONSE');
        ctx.reply(messageFromAI);
    } catch (err) {
        console.error('ERROR FROM OpenAI occured!')
        console.dir(chatsEntropy);

        chatsEntropy[user_id] = generatorOfEntropy;

        ctx.reply(ERROR_ANSWER_CODE);
    }
}
